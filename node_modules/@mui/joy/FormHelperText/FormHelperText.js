import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["children", "component"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_useForkRef as useForkRef } from '@mui/utils';
import composeClasses from '@mui/base/composeClasses';
import { useSlotProps } from '@mui/base/utils';
import { styled, useThemeProps } from '../styles';
import { getFormHelperTextUtilityClass } from './formHelperTextClasses';
import FormControlContext from '../FormControl/FormControlContext';
import formLabelClasses from '../FormLabel/formLabelClasses';
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = () => {
  const slots = {
    root: ['root']
  };
  return composeClasses(slots, getFormHelperTextUtilityClass, {});
};
const FormHelperTextRoot = styled('p', {
  name: 'JoyFormHelperText',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => ({
  display: 'flex',
  alignItems: 'center',
  fontFamily: theme.vars.fontFamily.body,
  fontSize: `var(--FormHelperText-fontSize, ${theme.vars.fontSize.sm})`,
  lineHeight: theme.vars.lineHeight.sm,
  color: `var(--FormHelperText-color, ${theme.vars.palette.text.secondary})`,
  margin: 'var(--FormHelperText-margin, 0px)',
  [`.${formLabelClasses.root} + &`]: {
    '--FormHelperText-margin': '0px' // remove the margin if the helper text is next to the form label.
  }
}));

const FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyFormHelperText'
  });
  const {
      children,
      component
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const rootRef = React.useRef(null);
  const handleRef = useForkRef(rootRef, ref);
  const formControl = React.useContext(FormControlContext);
  const setHelperText = formControl == null ? void 0 : formControl.setHelperText;
  React.useEffect(() => {
    setHelperText == null ? void 0 : setHelperText(rootRef.current);
    return () => {
      setHelperText == null ? void 0 : setHelperText(null);
    };
  }, [setHelperText]);
  const ownerState = _extends({}, props);
  const classes = useUtilityClasses();
  const rootProps = useSlotProps({
    elementType: FormHelperTextRoot,
    externalSlotProps: {},
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      ref: handleRef,
      as: component,
      id: formControl == null ? void 0 : formControl['aria-describedby']
    },
    className: classes.root
  });
  return /*#__PURE__*/_jsx(FormHelperTextRoot, _extends({}, rootProps, {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? FormHelperText.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;
export default FormHelperText;