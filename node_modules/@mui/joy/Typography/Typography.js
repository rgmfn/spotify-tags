import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["color", "textColor"],
  _excluded2 = ["component", "gutterBottom", "noWrap", "level", "levelMapping", "children", "endDecorator", "startDecorator", "variant"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_capitalize as capitalize } from '@mui/utils';
import { unstable_extendSxProp as extendSxProp } from '@mui/system';
import composeClasses from '@mui/base/composeClasses';
import styled from '../styles/styled';
import useThemeProps from '../styles/useThemeProps';
import { useColorInversion } from '../styles/ColorInversion';
import useSlot from '../utils/useSlot';
import { getTypographyUtilityClass } from './typographyClasses';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export const TypographyContext = /*#__PURE__*/React.createContext(false);
const useUtilityClasses = ownerState => {
  const {
    gutterBottom,
    noWrap,
    level,
    color,
    variant
  } = ownerState;
  const slots = {
    root: ['root', level, gutterBottom && 'gutterBottom', noWrap && 'noWrap', color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ['startDecorator'],
    endDecorator: ['endDecorator']
  };
  return composeClasses(slots, getTypographyUtilityClass, {});
};
const StartDecorator = styled('span', {
  name: 'JoyTypography',
  slot: 'StartDecorator',
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  ownerState
}) => {
  var _ownerState$sx;
  return _extends({
    display: 'inline-flex',
    marginInlineEnd: 'clamp(4px, var(--Typography-gap, 0.375em), 0.75rem)'
  }, typeof ownerState.startDecorator !== 'string' && (ownerState.alignItems === 'flex-start' || ((_ownerState$sx = ownerState.sx) == null ? void 0 : _ownerState$sx.alignItems) === 'flex-start') && {
    marginTop: '2px' // this makes the alignment perfect in most cases
  });
});

const EndDecorator = styled('span', {
  name: 'JoyTypography',
  slot: 'endDecorator',
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  ownerState
}) => {
  var _ownerState$sx2;
  return _extends({
    display: 'inline-flex',
    marginInlineStart: 'clamp(4px, var(--Typography-gap, 0.375em), 0.75rem)'
  }, typeof ownerState.endDecorator !== 'string' && (ownerState.alignItems === 'flex-start' || ((_ownerState$sx2 = ownerState.sx) == null ? void 0 : _ownerState$sx2.alignItems) === 'flex-start') && {
    marginTop: '2px' // this makes the alignment perfect in most cases
  });
});

const TypographyRoot = styled('span', {
  name: 'JoyTypography',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette$o, _theme$variants$owner;
  return _extends({
    '--Icon-fontSize': '1.25em',
    margin: 0
  }, ownerState.nesting ? {
    display: 'inline'
  } : {
    fontFamily: theme.vars.fontFamily.body,
    // for nested typography, the font family will be inherited.
    display: 'block'
  }, (ownerState.startDecorator || ownerState.endDecorator) && _extends({
    display: 'flex',
    alignItems: 'center'
  }, ownerState.nesting && _extends({
    display: 'inline-flex'
  }, ownerState.startDecorator && {
    verticalAlign: 'bottom' // to make the text align with the parent's content
  })), ownerState.level && ownerState.level !== 'inherit' && theme.typography[ownerState.level], ownerState.noWrap && {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  }, ownerState.gutterBottom && {
    marginBottom: '0.35em'
  }, ownerState.color && ownerState.color !== 'context' && {
    color: `rgba(${(_theme$vars$palette$o = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette$o.mainChannel} / 1)`
  }, ownerState.variant && _extends({
    borderRadius: theme.vars.radius.xs,
    paddingBlock: 'min(0.15em, 4px)',
    paddingInline: '0.375em'
  }, !ownerState.nesting && {
    marginInline: '-0.375em'
  }, (_theme$variants$owner = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants$owner[ownerState.color]));
});
const defaultVariantMapping = {
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  display1: 'h1',
  display2: 'h2',
  body1: 'p',
  body2: 'p',
  body3: 'span',
  body4: 'span',
  body5: 'span',
  inherit: 'p'
};
const Typography = /*#__PURE__*/React.forwardRef(function Typography(inProps, ref) {
  const _useThemeProps = useThemeProps({
      props: inProps,
      name: 'JoyTypography'
    }),
    {
      color: colorProp,
      textColor
    } = _useThemeProps,
    themeProps = _objectWithoutPropertiesLoose(_useThemeProps, _excluded);
  const nesting = React.useContext(TypographyContext);
  const props = extendSxProp(_extends({}, themeProps, {
    color: textColor
  }));
  const {
      component: componentProp,
      gutterBottom = false,
      noWrap = false,
      level: levelProp = 'body1',
      levelMapping = {},
      children,
      endDecorator,
      startDecorator,
      variant
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded2);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, variant ? colorProp != null ? colorProp : 'neutral' : colorProp);
  const level = nesting ? inProps.level || 'inherit' : levelProp;
  const component = componentProp || (nesting ? 'span' : levelMapping[level] || defaultVariantMapping[level] || 'span');
  const ownerState = _extends({}, props, {
    level,
    component,
    color,
    gutterBottom,
    noWrap,
    nesting,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const externalForwardedProps = _extends({}, other, {
    component
  });
  const [SlotRoot, rootProps] = useSlot('root', {
    ref,
    className: classes.root,
    elementType: TypographyRoot,
    externalForwardedProps,
    ownerState
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {
    className: classes.startDecorator,
    elementType: StartDecorator,
    externalForwardedProps,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {
    className: classes.endDecorator,
    elementType: EndDecorator,
    externalForwardedProps,
    ownerState
  });
  return /*#__PURE__*/_jsx(TypographyContext.Provider, {
    value: true,
    children: /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {
      children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {
        children: startDecorator
      })), children, endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {
        children: endDecorator
      }))]
    }))
  });
});
process.env.NODE_ENV !== "production" ? Typography.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * Element placed after the children.
   */
  endDecorator: PropTypes.node,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: PropTypes.bool,
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  level: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'body3', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit']), PropTypes.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, body1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   body3: 'p',
   *   inherit: 'p',
   * }
   */
  levelMapping: PropTypes /* @typescript-to-proptypes-ignore */.object,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: PropTypes.bool,
  /**
   * Element placed before the children.
   */
  startDecorator: PropTypes.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The system color.
   */
  textColor: PropTypes /* @typescript-to-proptypes-ignore */.any,
  /**
   * The variant to use.
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])
} : void 0;
export default Typography;