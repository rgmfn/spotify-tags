import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
const _excluded = ["colorSchemes", "focus", "fontFamily", "fontSize", "fontWeight", "letterSpacing", "lineHeight", "radius", "shadow", "palette", "colorInversion"],
  _excluded2 = ["mode", "colorScheme"];
import { deepmerge } from '@mui/utils';
import extendTheme from './extendTheme';
import { createSoftInversion, createSolidInversion } from './variantUtils';
export const getThemeWithVars = themeInput => {
  const _extendTheme = extendTheme(themeInput),
    {
      colorSchemes,
      focus,
      fontFamily,
      fontSize,
      fontWeight,
      letterSpacing,
      lineHeight,
      radius,
      shadow,
      palette: paletteInput,
      colorInversion: colorInversionInput
    } = _extendTheme,
    restTheme = _objectWithoutPropertiesLoose(_extendTheme, _excluded);
  const colorSchemePalette = deepmerge(colorSchemes[(paletteInput == null ? void 0 : paletteInput.colorScheme) || 'light'].palette, paletteInput);
  const _ref = colorSchemePalette,
    {
      mode = 'light',
      colorScheme = 'light'
    } = _ref,
    palette = _objectWithoutPropertiesLoose(_ref, _excluded2);
  const theme = _extends({
    focus,
    fontFamily,
    fontSize,
    fontWeight,
    letterSpacing,
    lineHeight,
    radius,
    shadow
  }, restTheme, {
    colorSchemes: _extends({}, colorSchemes, {
      [colorScheme]: palette
    }),
    palette: _extends({}, palette, {
      mode,
      colorScheme
    }),
    vars: {
      focus,
      fontFamily,
      fontSize,
      fontWeight,
      letterSpacing,
      lineHeight,
      radius,
      shadow,
      palette
    },
    getColorSchemeSelector: () => '&'
  });
  theme.colorInversion = deepmerge({
    soft: createSoftInversion(theme),
    solid: createSolidInversion(theme)
  }, colorInversionInput);
  return theme;
};
const defaultTheme = getThemeWithVars();
export default defaultTheme;