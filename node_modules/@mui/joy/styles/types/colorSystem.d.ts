import { OverridableStringUnion, Simplify } from '@mui/types';
/**
 * ====================================================
 * Developer facing types, they can augment these types.
 * ====================================================
 */
export interface PaletteVariant {
    plainColor: string;
    plainBg: string;
    plainBorder: string;
    plainHoverColor: string;
    plainHoverBorder: string;
    plainHoverBg: string;
    plainActiveColor: string;
    plainActiveBorder: string;
    plainActiveBg: string;
    plainDisabledColor: string;
    plainDisabledBorder: string;
    plainDisabledBg: string;
    outlinedColor: string;
    outlinedBorder: string;
    outlinedBg: string;
    outlinedHoverColor: string;
    outlinedHoverBorder: string;
    outlinedHoverBg: string;
    outlinedActiveColor: string;
    outlinedActiveBorder: string;
    outlinedActiveBg: string;
    outlinedDisabledColor: string;
    outlinedDisabledBorder: string;
    outlinedDisabledBg: string;
    softColor: string;
    softBorder: string;
    softBg: string;
    softHoverColor: string;
    softHoverBorder: string;
    softHoverBg: string;
    softActiveColor: string;
    softActiveBorder: string;
    softActiveBg: string;
    softDisabledColor: string;
    softDisabledBorder: string;
    softDisabledBg: string;
    solidColor: string;
    solidBg: string;
    solidBorder: string;
    solidHoverColor: string;
    solidHoverBg: string;
    solidHoverBorder: string;
    solidActiveColor: string;
    solidActiveBg: string;
    solidActiveBorder: string;
    solidDisabledColor: string;
    solidDisabledBg: string;
    solidDisabledBorder: string;
}
export interface PaletteRangeOverrides {
}
export type ExtendedPaletteRange = OverridableStringUnion<'50' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | 'mainChannel' | 'lightChannel' | 'darkChannel', PaletteRangeOverrides>;
export interface PaletteRange extends Record<ExtendedPaletteRange, string>, PaletteVariant {
}
export interface PaletteCommon {
    white: string;
    black: string;
}
export interface PaletteText {
    primary: string;
    secondary: string;
    tertiary: string;
}
export interface PaletteBackground {
    body: string;
    surface: string;
    popup: string;
    level1: string;
    level2: string;
    level3: string;
    tooltip: string;
    backdrop: string;
}
export interface ColorPalettePropOverrides {
}
export type DefaultColorPalette = 'primary' | 'neutral' | 'danger' | 'info' | 'success' | 'warning';
export type ColorPaletteProp = OverridableStringUnion<DefaultColorPalette, ColorPalettePropOverrides>;
export interface PalettePrimary extends PaletteRange {
}
export interface PaletteNeutral extends PaletteRange {
}
export interface PaletteDanger extends PaletteRange {
}
export interface PaletteInfo extends PaletteRange {
}
export interface PaletteSuccess extends PaletteRange {
}
export interface PaletteWarning extends PaletteRange {
}
export interface Palette {
    mode: 'light' | 'dark';
    primary: PalettePrimary;
    neutral: PaletteNeutral;
    danger: PaletteDanger;
    info: PaletteInfo;
    success: PaletteSuccess;
    warning: PaletteWarning;
    common: PaletteCommon;
    text: PaletteText;
    background: PaletteBackground;
    divider: string;
    focusVisible: string;
}
export interface ColorSystem {
    palette: Palette;
    shadowRing: string;
    shadowChannel: string;
}
export type ApplyColorInversion<T extends {
    color?: ColorPaletteProp | 'inherit';
}> = Simplify<Omit<T, 'color'> & {
    color: T['color'] | 'context';
}>;
