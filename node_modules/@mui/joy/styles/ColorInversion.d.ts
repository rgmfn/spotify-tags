import * as React from 'react';
import { ColorPaletteProp, VariantProp } from './types';
declare const ColorInversion: React.Context<VariantProp[] | undefined>;
export declare const useColorInversion: (childVariant: VariantProp | undefined) => {
    /**
     * Resolve the `color` value for the component.
     * @param {ColorPaletteProp | 'inherit' | undefined} instanceColorProp The color defined on the instance.
     * @param {ColorPaletteProp | 'inherit' | undefined} defaultColorProp The default color to use when variant inversion is not enabled.
     */
    getColor: (instanceColorProp: ColorPaletteProp | 'inherit' | undefined, defaultColorProp: ColorPaletteProp | 'inherit' | undefined) => ColorPaletteProp | 'context' | undefined;
};
interface ColorInversionProviderProps {
    children: React.ReactNode;
    variant?: VariantProp;
}
export declare function ColorInversionProvider({ children, variant }: ColorInversionProviderProps): JSX.Element;
export default ColorInversion;
