import * as React from 'react';
import { useTheme as useSystemTheme } from '@mui/system';
import defaultTheme from './defaultTheme';
import { jsx as _jsx } from "react/jsx-runtime";
const ColorInversion = /*#__PURE__*/React.createContext(undefined);
export const useColorInversion = childVariant => {
  const overriableVariants = React.useContext(ColorInversion);
  return {
    /**
     * Resolve the `color` value for the component.
     * @param {ColorPaletteProp | 'inherit' | undefined} instanceColorProp The color defined on the instance.
     * @param {ColorPaletteProp | 'inherit' | undefined} defaultColorProp The default color to use when variant inversion is not enabled.
     */
    getColor: (instanceColorProp, defaultColorProp) => {
      if (overriableVariants && childVariant) {
        if (overriableVariants.includes(childVariant)) {
          // @ts-ignore internal logic
          return instanceColorProp || 'context';
        }
      }
      // @ts-ignore internal logic
      return instanceColorProp || defaultColorProp;
    }
  };
};
export function ColorInversionProvider({
  children,
  variant
}) {
  const theme = useSystemTheme(defaultTheme);
  return /*#__PURE__*/_jsx(ColorInversion.Provider, {
    value: variant ? theme.colorInversionConfig[variant] : undefined,
    children: children
  });
}
export default ColorInversion;