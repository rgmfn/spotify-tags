import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["component", "className", "children", "inset", "orientation"];
import * as React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { unstable_capitalize as capitalize } from '@mui/utils';
import composeClasses from '@mui/base/composeClasses';
import { styled, useThemeProps } from '../styles';
import Divider from '../Divider/Divider';
import { getListDividerUtilityClass } from './listDividerClasses';
import RowListContext from '../List/RowListContext';
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const slots = {
    root: ['root',
    // `insetContext` class is already produced by Divider
    ownerState.inset && ownerState.inset !== 'context' && `inset${capitalize(ownerState.inset)}`]
  };
  return composeClasses(slots, getListDividerUtilityClass, {});
};
const ListDividerRoot = styled(Divider, {
  name: 'JoyListDivider',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({}, ownerState.inset === 'context' && {
  '--Divider-inset': 'calc(-1 * var(--List-padding))'
}, ownerState.row && _extends({
  marginInline: 'var(--List-divider-gap)'
}, ownerState.inset === 'gutter' && {
  marginBlock: 'var(--List-item-paddingY)'
}, ownerState['data-first-child'] === undefined && {
  // combine --List-gap and --List-divider-gap to replicate flexbox gap behavior
  marginInlineStart: 'calc(var(--List-gap) + var(--List-divider-gap))'
}), !ownerState.row && _extends({}, ownerState['data-first-child'] === undefined && {
  // combine --List-gap and --List-divider-gap to replicate flexbox gap behavior
  marginBlockStart: 'calc(var(--List-gap) + var(--List-divider-gap))'
}, {
  marginBlockEnd: 'var(--List-divider-gap)'
}, ownerState.inset === 'gutter' && {
  marginInlineStart: 'var(--List-item-paddingLeft)',
  marginInlineEnd: 'var(--List-item-paddingRight)'
}, ownerState.inset === 'startDecorator' && {
  marginInlineStart: 'var(--List-item-paddingLeft)'
}, ownerState.inset === 'startContent' && {
  marginInlineStart: 'calc(var(--List-item-paddingLeft) + var(--List-decorator-size))'
})));
const ListDivider = /*#__PURE__*/React.forwardRef(function ListDivider(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyListDivider'
  });
  const row = React.useContext(RowListContext);
  const {
      component = 'li',
      className,
      children,
      inset = 'context',
      orientation = row ? 'vertical' : 'horizontal'
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const ownerState = _extends({}, props, {
    inset,
    row,
    orientation
  });
  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/_jsx(ListDividerRoot
  // @ts-ignore
  , _extends({
    ref: ref
  }, inset === 'context' && {
    inset
  }, {
    component: component,
    className: clsx(classes.root, className),
    ownerState: ownerState,
    orientation: orientation
  }, other, {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? ListDivider.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The empty space on the side(s) of the divider in a vertical list.
   *
   * For horizontal list (the nearest parent List has `row` prop set to `true`), only `inset="gutter"` affects the list divider.
   */
  inset: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['gutter', 'startDecorator', 'startContent']), PropTypes.string]),
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: PropTypes.oneOf(['horizontal', 'vertical']),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;
export default ListDivider;