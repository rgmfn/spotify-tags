import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["children", "className", "color", "role", "variant", "size", "startDecorator", "endDecorator"];
import * as React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import { unstable_composeClasses as composeClasses } from '@mui/base';
import { unstable_capitalize as capitalize } from '@mui/utils';
import styled from '../styles/styled';
import useThemeProps from '../styles/useThemeProps';
import { useColorInversion } from '../styles/ColorInversion';
import useSlot from '../utils/useSlot';
import { getAlertUtilityClass } from './alertClasses';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const {
    variant,
    color,
    size
  } = ownerState;
  const slots = {
    root: ['root', size && `size${capitalize(size)}`, color && `color${capitalize(color)}`, variant && `variant${capitalize(variant)}`],
    startDecorator: ['startDecorator'],
    endDecorator: ['endDecorator']
  };
  return composeClasses(slots, getAlertUtilityClass, {});
};
const AlertRoot = styled('div', {
  name: 'JoyAlert',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants;
  return _extends({
    '--Alert-radius': theme.vars.radius.sm,
    '--Alert-decorator-childRadius': 'max((var(--Alert-radius) - var(--variant-borderWidth, 0px)) - var(--Alert-padding), min(var(--Alert-padding) + var(--variant-borderWidth, 0px), var(--Alert-radius) / 2))',
    '--Button-minHeight': 'var(--Alert-decorator-childHeight)',
    '--IconButton-size': 'var(--Alert-decorator-childHeight)',
    '--Button-radius': 'var(--Alert-decorator-childRadius)',
    '--IconButton-radius': 'var(--Alert-decorator-childRadius)'
  }, ownerState.size === 'sm' && {
    '--Alert-padding': '0.5rem',
    '--Alert-gap': '0.375rem',
    '--Alert-decorator-childHeight': '1.5rem',
    '--Icon-fontSize': '1.125rem',
    fontSize: theme.vars.fontSize.sm
  }, ownerState.size === 'md' && {
    '--Alert-padding': '0.75rem',
    '--Alert-gap': '0.5rem',
    '--Alert-decorator-childHeight': '2rem',
    '--Icon-fontSize': '1.25rem',
    fontSize: theme.vars.fontSize.sm,
    fontWeight: theme.vars.fontWeight.md
  }, ownerState.size === 'lg' && {
    '--Alert-padding': '1rem',
    '--Alert-gap': '0.75rem',
    '--Alert-decorator-childHeight': '2.375rem',
    '--Icon-fontSize': '1.5rem',
    fontSize: theme.vars.fontSize.md,
    fontWeight: theme.vars.fontWeight.md
  }, {
    fontFamily: theme.vars.fontFamily.body,
    lineHeight: theme.vars.lineHeight.md,
    backgroundColor: 'transparent',
    display: 'flex',
    alignItems: 'center',
    padding: `var(--Alert-padding)`,
    borderRadius: 'var(--Alert-radius)'
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color]);
});
const AlertStartDecorator = styled('span', {
  name: 'JoyAlert',
  slot: 'StartDecorator',
  overridesResolver: (props, styles) => styles.startDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette;
  return _extends({
    display: 'inherit',
    flex: 'none',
    marginInlineEnd: 'var(--Alert-gap)'
  }, ownerState.color !== 'context' && {
    color: (_theme$vars$palette = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette[`${ownerState.variant}Color`]
  });
});
const AlertEndDecorator = styled('span', {
  name: 'JoyAlert',
  slot: 'EndDecorator',
  overridesResolver: (props, styles) => styles.endDecorator
})(({
  theme,
  ownerState
}) => {
  var _theme$vars$palette2;
  return _extends({
    display: 'inherit',
    flex: 'none',
    marginInlineStart: 'var(--Alert-gap)',
    marginLeft: 'auto'
  }, ownerState.color !== 'context' && {
    color: (_theme$vars$palette2 = theme.vars.palette[ownerState.color]) == null ? void 0 : _theme$vars$palette2[`${ownerState.variant}Color`]
  });
});
const Alert = /*#__PURE__*/React.forwardRef(function Alert(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyAlert'
  });
  const {
      children,
      className,
      color: colorProp = 'primary',
      role = 'alert',
      variant = 'soft',
      size = 'md',
      startDecorator,
      endDecorator
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = _extends({}, props, {
    color,
    variant,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const [SlotRoot, rootProps] = useSlot('root', {
    ref,
    className: clsx(classes.root, className),
    elementType: AlertRoot,
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      role
    }
  });
  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {
    className: classes.startDecorator,
    elementType: AlertStartDecorator,
    externalForwardedProps: other,
    ownerState
  });
  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {
    className: classes.endDecorator,
    elementType: AlertEndDecorator,
    externalForwardedProps: other,
    ownerState
  });
  return /*#__PURE__*/_jsxs(SlotRoot, _extends({}, rootProps, {
    children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, _extends({}, startDecoratorProps, {
      children: startDecorator
    })), children, endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, _extends({}, endDecoratorProps, {
      children: endDecorator
    }))]
  }));
});
process.env.NODE_ENV !== "production" ? Alert.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),
  /**
   * Element placed after the children.
   */
  endDecorator: PropTypes.node,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: PropTypes.string,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),
  /**
   * Element placed before the children.
   */
  startDecorator: PropTypes.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The variant to use.
   * @default 'soft'
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])
} : void 0;
export default Alert;