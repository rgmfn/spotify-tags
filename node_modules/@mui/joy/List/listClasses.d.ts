export interface ListClasses {
    /** Classname applied to the root element. */
    root: string;
    /** Classname applied to the root element if wrapped with nested context. */
    nesting: string;
    /** Classname applied to the root element if `row` is true. */
    row: string;
    /** Classname applied to the root element if `scoped` is true. */
    scoped: string;
    /** Classname applied to the root element if `size="sm"`. */
    sizeSm: string;
    /** Classname applied to the root element if `size="md"`. */
    sizeMd: string;
    /** Classname applied to the root element if `size="lg"`. */
    sizeLg: string;
    /** Classname applied to the root element if `color="primary"`. */
    colorPrimary: string;
    /** Classname applied to the root element if `color="neutral"`. */
    colorNeutral: string;
    /** Classname applied to the root element if `color="danger"`. */
    colorDanger: string;
    /** Classname applied to the root element if `color="info"`. */
    colorInfo: string;
    /** Classname applied to the root element if `color="success"`. */
    colorSuccess: string;
    /** Classname applied to the root element if `color="warning"`. */
    colorWarning: string;
    /** Styles applied to the root element when color inversion is triggered. */
    colorContext: string;
    /** Classname applied to the root element if `variant="plain"`. */
    variantPlain: string;
    /** Classname applied to the root element if `variant="outlined"`. */
    variantOutlined: string;
    /** Classname applied to the root element if `variant="soft"`. */
    variantSoft: string;
    /** Classname applied to the root element if `variant="solid"`. */
    variantSolid: string;
}
export type ListClassKey = keyof ListClasses;
export declare function getListUtilityClass(slot: string): string;
declare const listClasses: ListClasses;
export default listClasses;
