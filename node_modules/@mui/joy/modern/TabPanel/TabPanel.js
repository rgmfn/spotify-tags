import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["children", "value", "component", "size"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_capitalize as capitalize } from '@mui/utils';
import { unstable_composeClasses as composeClasses } from '@mui/base';
import { useTabContext } from '@mui/base/TabsUnstyled';
import { useTabPanel } from '@mui/base/TabPanelUnstyled';
import { useSlotProps } from '@mui/base/utils';
import { styled, useThemeProps } from '../styles';
import SizeTabsContext from '../Tabs/SizeTabsContext';
import { getTabPanelUtilityClass } from './tabPanelClasses';
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const {
    hidden,
    size
  } = ownerState;
  const slots = {
    root: ['root', hidden && 'hidden', size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getTabPanelUtilityClass, {});
};
const TabPanelRoot = styled('div', {
  name: 'JoyTabPanel',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => _extends({
  display: ownerState.hidden ? 'none' : 'initial'
}, ownerState.orientation === 'horizontal' && {
  paddingBlockStart: 'var(--Tabs-gap)'
}, ownerState.orientation === 'vertical' && {
  paddingInlineStart: 'var(--Tabs-gap)'
}, ownerState.size === 'sm' && {
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === 'md' && {
  fontSize: theme.vars.fontSize.md
}, ownerState.size === 'lg' && {
  fontSize: theme.vars.fontSize.lg
}, {
  flexGrow: 1,
  fontFamily: theme.vars.fontFamily.body
}));
const TabPanel = /*#__PURE__*/React.forwardRef(function TabPanel(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyTabPanel'
  });
  const {
    orientation
  } = useTabContext() || {
    orientation: 'horizontal'
  };
  const tabsSize = React.useContext(SizeTabsContext);
  const {
      children,
      component,
      size: sizeProp
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const {
    hidden,
    getRootProps
  } = useTabPanel(props);
  const size = sizeProp ?? tabsSize;
  const ownerState = _extends({}, props, {
    orientation,
    hidden,
    size
  });
  const classes = useUtilityClasses(ownerState);
  const tabPanelRootProps = useSlotProps({
    elementType: TabPanelRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      role: 'tabpanel',
      ref,
      as: component
    },
    ownerState,
    className: classes.root
  });
  return /*#__PURE__*/_jsx(TabPanelRoot, _extends({}, tabPanelRootProps, {
    children: !hidden && children
  }));
});
process.env.NODE_ENV !== "production" ? TabPanel.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The size of the component.
   */
  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
   */
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired
} : void 0;
export default TabPanel;