import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
const _excluded = ["component", "className", "children"];
import * as React from 'react';
import PropTypes from 'prop-types';
import clsx from 'clsx';
import composeClasses from '@mui/base/composeClasses';
import { styled, useThemeProps } from '../styles';
import { getListItemDecoratorUtilityClass } from './listItemDecoratorClasses';
import ListItemButtonOrientationContext from '../ListItemButton/ListItemButtonOrientationContext';
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = () => {
  const slots = {
    root: ['root']
  };
  return composeClasses(slots, getListItemDecoratorUtilityClass, {});
};
const ListItemDecoratorRoot = styled('span', {
  name: 'JoyListItemDecorator',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState
}) => _extends({
  boxSizing: 'border-box',
  display: 'inline-flex',
  alignItems: 'center',
  color: `var(--List-decorator-color)`
}, ownerState.parentOrientation === 'horizontal' ? {
  minInlineSize: 'var(--List-decorator-size)'
} : {
  minBlockSize: 'var(--List-decorator-size)'
}));
const ListItemDecorator = /*#__PURE__*/React.forwardRef(function ListItemDecorator(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: 'JoyListItemDecorator'
  });
  const {
      component,
      className,
      children
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const parentOrientation = React.useContext(ListItemButtonOrientationContext);
  const ownerState = _extends({
    parentOrientation
  }, props);
  const classes = useUtilityClasses();
  return /*#__PURE__*/_jsx(ListItemDecoratorRoot, _extends({
    ref: ref,
    as: component,
    className: clsx(classes.root, className),
    ownerState: ownerState
  }, other, {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? ListItemDecorator.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: PropTypes.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: PropTypes.object,
  /**
   * @ignore
   */
  className: PropTypes.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
} : void 0;
export default ListItemDecorator;