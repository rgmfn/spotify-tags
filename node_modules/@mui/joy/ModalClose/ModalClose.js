import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
var _CloseIcon;
const _excluded = ["component", "color", "variant", "size", "onClick"];
import * as React from 'react';
import PropTypes from 'prop-types';
import { unstable_composeClasses as composeClasses } from '@mui/base';
import { unstable_capitalize as capitalize } from '@mui/utils';
import { useSlotProps } from '@mui/base/utils';
import { useButton } from '@mui/base/ButtonUnstyled';
import { useThemeProps, styled } from '../styles';
import { useColorInversion } from '../styles/ColorInversion';
import { StyledIconButton } from '../IconButton/IconButton';
import { getModalCloseUtilityClass } from './modalCloseClasses';
import CloseIcon from '../internal/svg-icons/Close';
import CloseModalContext from '../Modal/CloseModalContext';
import ModalDialogSizeContext from '../ModalDialog/ModalDialogSizeContext';
import ModalDialogVariantColorContext from '../ModalDialog/ModalDialogVariantColorContext';
import { jsx as _jsx } from "react/jsx-runtime";
const useUtilityClasses = ownerState => {
  const {
    variant,
    color,
    disabled,
    focusVisible,
    size
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`]
  };
  return composeClasses(slots, getModalCloseUtilityClass, {});
};
export const ModalCloseRoot = styled(StyledIconButton, {
  name: 'JoyModalClose',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants2;
  return _extends({}, ownerState.size === 'sm' && {
    '--IconButton-size': '28px'
  }, ownerState.size === 'md' && {
    '--IconButton-size': '36px'
  }, ownerState.size === 'lg' && {
    '--IconButton-size': '40px'
  }, {
    position: 'absolute',
    top: `var(--ModalClose-inset, ${theme.spacing(1)})`,
    right: `var(--ModalClose-inset, ${theme.spacing(1)})`,
    borderRadius: `var(--ModalClose-radius, ${theme.vars.radius.sm})`
  }, !((_theme$variants = theme.variants[ownerState.variant]) != null && (_theme$variants2 = _theme$variants[ownerState.color]) != null && _theme$variants2.backgroundColor) && {
    color: theme.vars.palette.text.secondary
  });
});
const modalDialogVariantMapping = {
  plain: 'plain',
  outlined: 'plain',
  soft: 'soft',
  solid: 'solid'
};
const ModalClose = /*#__PURE__*/React.forwardRef(function ModalClose(inProps, ref) {
  var _ref, _inProps$variant, _modalDialogVariantCo, _ref2, _inProps$size;
  const props = useThemeProps({
    props: inProps,
    name: 'JoyModalClose'
  });
  const {
      component = 'button',
      color: colorProp = 'neutral',
      variant: variantProp = 'plain',
      size: sizeProp = 'md',
      onClick
    } = props,
    other = _objectWithoutPropertiesLoose(props, _excluded);
  const closeModalContext = React.useContext(CloseModalContext);
  const modalDialogVariantColor = React.useContext(ModalDialogVariantColorContext);
  const variant = (_ref = (_inProps$variant = inProps.variant) != null ? _inProps$variant : modalDialogVariantMapping[modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.variant]) != null ? _ref : variantProp;
  const {
    getColor
  } = useColorInversion(variant);
  const color = getColor(inProps.color, (_modalDialogVariantCo = modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.color) != null ? _modalDialogVariantCo : colorProp);
  const modalDialogSize = React.useContext(ModalDialogSizeContext);
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : modalDialogSize) != null ? _ref2 : sizeProp;
  const {
    focusVisible,
    getRootProps
  } = useButton(_extends({}, props, {
    ref
  }));
  const ownerState = _extends({}, props, {
    color,
    component,
    variant,
    size,
    focusVisible
  });
  const classes = useUtilityClasses(ownerState);
  const rootProps = useSlotProps({
    elementType: ModalCloseRoot,
    getSlotProps: getRootProps,
    externalSlotProps: _extends({
      onClick: event => {
        closeModalContext == null ? void 0 : closeModalContext(event, 'closeClick');
        onClick == null ? void 0 : onClick(event);
      }
    }, other),
    additionalProps: {
      as: component
    },
    className: classes.root,
    ownerState
  });
  return /*#__PURE__*/_jsx(ModalCloseRoot, _extends({}, rootProps, {
    children: _CloseIcon || (_CloseIcon = /*#__PURE__*/_jsx(CloseIcon, {}))
  }));
});
process.env.NODE_ENV !== "production" ? ModalClose.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: PropTypes.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), PropTypes.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: PropTypes.elementType,
  /**
   * @ignore
   */
  onClick: PropTypes.func,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
  /**
   * The variant to use.
   * @default 'plain'
   */
  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid']), PropTypes.string])
} : void 0;
export default ModalClose;