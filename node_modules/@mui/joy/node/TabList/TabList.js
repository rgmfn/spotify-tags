"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _TabsListUnstyled = require("@mui/base/TabsListUnstyled");
var _utils2 = require("@mui/base/utils");
var _styles = require("../styles");
var _styled = _interopRequireDefault(require("../styles/styled"));
var _ColorInversion = require("../styles/ColorInversion");
var _List = require("../List/List");
var _ListProvider = _interopRequireWildcard(require("../List/ListProvider"));
var _SizeTabsContext = _interopRequireDefault(require("../Tabs/SizeTabsContext"));
var _tabListClasses = require("./tabListClasses");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["component", "children", "variant", "color", "size"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useUtilityClasses = ownerState => {
  const {
    orientation,
    size,
    variant,
    color
  } = ownerState;
  const slots = {
    root: ['root', orientation, variant && `variant${(0, _utils.unstable_capitalize)(variant)}`, color && `color${(0, _utils.unstable_capitalize)(color)}`, size && `size${(0, _utils.unstable_capitalize)(size)}`]
  };
  return (0, _base.unstable_composeClasses)(slots, _tabListClasses.getTabListUtilityClass, {});
};
const TabListRoot = (0, _styled.default)(_List.StyledList, {
  name: 'JoyTabList',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme
}) => (0, _extends2.default)({
  flexGrow: 'initial',
  '--List-radius': theme.vars.radius.md,
  // targets TabList which reuses styles from List.
  '--List-gap': 'var(--Tabs-gap)',
  '--List-padding': 'var(--Tabs-gap)',
  '--List-divider-gap': '0px'
}, _ListProvider.scopedVariables));
const TabList = /*#__PURE__*/React.forwardRef(function TabList(inProps, ref) {
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoyTabList'
  });
  const tabsSize = React.useContext(_SizeTabsContext.default);
  const {
      component = 'div',
      variant = 'soft',
      color: colorProp = 'neutral',
      size: sizeProp
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const {
    getColor
  } = (0, _ColorInversion.useColorInversion)(variant);
  const color = getColor(inProps.color, colorProp);
  const {
    isRtl,
    orientation,
    getRootProps,
    processChildren
  } = (0, _TabsListUnstyled.useTabsList)((0, _extends2.default)({}, props, {
    ref
  }));
  const row = orientation === 'horizontal';
  const size = sizeProp != null ? sizeProp : tabsSize;
  const ownerState = (0, _extends2.default)({}, props, {
    isRtl,
    orientation,
    variant,
    color,
    size,
    row,
    nesting: false
  });
  const classes = useUtilityClasses(ownerState);
  const tabsListRootProps = (0, _utils2.useSlotProps)({
    elementType: TabListRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    additionalProps: {
      as: component
    },
    ownerState,
    className: classes.root
  });
  const processedChildren = processChildren();
  return (
    /*#__PURE__*/
    // @ts-ignore conflicted ref types
    (0, _jsxRuntime.jsx)(TabListRoot, (0, _extends2.default)({}, tabsListRootProps, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ListProvider.default, {
        row: row,
        nested: true,
        children: processedChildren
      })
    }))
  );
});
process.env.NODE_ENV !== "production" ? TabList.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Used to render icon or text elements inside the TabList if `src` is not set.
   * This can be an element, or just a string.
   */
  children: _propTypes.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * The size of the component.
   */
  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['sm', 'md', 'lg']), _propTypes.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The variant to use.
   * @default 'soft'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['outlined', 'plain', 'soft', 'solid']), _propTypes.default.string])
} : void 0;
var _default = TabList;
exports.default = _default;