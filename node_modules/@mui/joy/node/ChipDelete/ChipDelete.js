"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("@mui/utils");
var _base = require("@mui/base");
var _utils2 = require("@mui/base/utils");
var _styles = require("../styles");
var _styled = _interopRequireDefault(require("../styles/styled"));
var _ColorInversion = require("../styles/ColorInversion");
var _Cancel2 = _interopRequireDefault(require("../internal/svg-icons/Cancel"));
var _chipDeleteClasses = _interopRequireWildcard(require("./chipDeleteClasses"));
var _ChipContext = _interopRequireDefault(require("../Chip/ChipContext"));
var _jsxRuntime = require("react/jsx-runtime");
var _Cancel;
const _excluded = ["component", "children", "variant", "color", "disabled", "onKeyDown", "onDelete", "onClick"],
  _excluded2 = ["onDelete"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useUtilityClasses = ownerState => {
  const {
    focusVisible,
    variant,
    color,
    disabled
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', variant && `variant${(0, _utils.unstable_capitalize)(variant)}`, color && `color${(0, _utils.unstable_capitalize)(color)}`]
  };
  return (0, _base.unstable_composeClasses)(slots, _chipDeleteClasses.getChipDeleteUtilityClass, {});
};
const ChipDeleteRoot = (0, _styled.default)('button', {
  name: 'JoyChipDelete',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants2, _theme$variants3, _theme$variants4;
  return [{
    '--Icon-margin': 'initial',
    // prevent overrides from parent
    pointerEvents: 'visible',
    // force the ChipDelete to be hoverable because the decorator can have pointerEvents 'none'
    cursor: 'pointer',
    width: 'var(--Chip-delete-size, 2rem)',
    height: 'var(--Chip-delete-size, 2rem)',
    borderRadius: 'var(--Chip-delete-radius, 50%)',
    margin: 'var(--Chip-delete-margin)',
    display: 'inline-flex',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1,
    // overflow above sibling button or anchor
    border: 'none',
    // reset user agent stylesheet
    background: 'none',
    // reset user agent stylesheet
    padding: '0px',
    // reset user agent stylesheet
    [theme.focus.selector]: theme.focus.default
  }, (_theme$variants = theme.variants[ownerState.variant]) == null ? void 0 : _theme$variants[ownerState.color], {
    '&:hover': (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : _theme$variants2[ownerState.color]
  }, {
    '&:active': (_theme$variants3 = theme.variants[`${ownerState.variant}Active`]) == null ? void 0 : _theme$variants3[ownerState.color]
  }, {
    [`&.${_chipDeleteClasses.default.disabled}`]: (_theme$variants4 = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants4[ownerState.color]
  }];
});
const chipVariantMapping = {
  plain: 'outlined',
  outlined: 'soft',
  soft: 'solid',
  solid: 'solid'
};
const ChipDelete = /*#__PURE__*/React.forwardRef(function ChipDelete(inProps, ref) {
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoyChipDelete'
  });
  const {
      component,
      children,
      variant: variantProp,
      color: colorProp,
      disabled: disabledProp,
      onKeyDown,
      onDelete,
      onClick
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const chipContext = React.useContext(_ChipContext.default);
  const variant = variantProp || chipVariantMapping[chipContext.variant] || 'solid';
  const {
    getColor
  } = (0, _ColorInversion.useColorInversion)(variant);
  const color = getColor(inProps.color, colorProp || chipContext.color || 'primary');
  const disabled = disabledProp != null ? disabledProp : chipContext.disabled;
  const buttonRef = React.useRef(null);
  const handleRef = (0, _utils.unstable_useForkRef)(buttonRef, ref);
  const {
    focusVisible,
    getRootProps
  } = (0, _base.useButton)((0, _extends2.default)({}, props, {
    disabled,
    ref: handleRef
  }));
  const ownerState = (0, _extends2.default)({}, props, {
    disabled,
    variant,
    color,
    focusVisible
  });
  const classes = useUtilityClasses(ownerState);
  const handleClickDelete = event => {
    if (!disabled && onDelete) {
      onDelete(event);
    }
    if (onClick) {
      onClick(event);
    }
  };
  const handleKeyDelete = event => {
    if (['Backspace', 'Enter', 'Delete'].includes(event.key)) {
      event.preventDefault();
      if (!disabled && onDelete) {
        onDelete(event);
      }
    }
    if (onKeyDown) {
      onKeyDown(event);
    }
  };
  const rootProps = (0, _utils2.useSlotProps)({
    elementType: ChipDeleteRoot,
    getSlotProps: getRootProps,
    externalSlotProps: {},
    externalForwardedProps: other,
    ownerState,
    additionalProps: {
      as: component,
      onKeyDown: handleKeyDelete,
      onClick: handleClickDelete
    },
    className: classes.root
  });
  const restOfRootProps = (0, _objectWithoutPropertiesLoose2.default)(rootProps, _excluded2);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ChipDeleteRoot, (0, _extends2.default)({}, restOfRootProps, {
    children: children != null ? children : _Cancel || (_Cancel = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Cancel2.default, {}))
  }));
});
process.env.NODE_ENV !== "production" ? ChipDelete.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If provided, it will replace the default icon.
   */
  children: _propTypes.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'primary'
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * If `true`, the component is disabled.
   * If `undefined`, the value inherits from the parent chip via a React context.
   */
  disabled: _propTypes.default.bool,
  /**
   * @ignore
   */
  onClick: _propTypes.default.func,
  /**
   * Callback fired when the component is not disabled and either:
   * - `Backspace`, `Enter` or `Delete` is pressed.
   * - The component is clicked.
   */
  onDelete: _propTypes.default.func,
  /**
   * @ignore
   */
  onKeyDown: _propTypes.default.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The variant to use.
   * @default 'solid'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['outlined', 'plain', 'soft', 'solid']), _propTypes.default.string])
} : void 0;
var _default = ChipDelete;
exports.default = _default;