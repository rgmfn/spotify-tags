"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scopedVariables = exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _RowListContext = _interopRequireDefault(require("./RowListContext"));
var _WrapListContext = _interopRequireDefault(require("./WrapListContext"));
var _NestedListContext = _interopRequireDefault(require("./NestedListContext"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * This variables should be used in a List to create a scope
 * that will not inherit variables from the upper scope.
 *
 * Used in `Menu`, `MenuList`, `TabList`, `Select`, and `Autocomplete` to communicate with nested List.
 *
 * e.g. menu group:
 * <Menu>
 *   <List>...</List>
 *   <List>...</List>
 * </Menu>
 */
const scopedVariables = {
  '--NestedList-marginRight': '0px',
  '--NestedList-marginLeft': '0px',
  '--NestedList-item-paddingLeft': 'var(--List-item-paddingX)',
  // reset ListItem, ListItemButton negative margin (caused by NestedListItem)
  '--List-itemButton-marginBlock': '0px',
  '--List-itemButton-marginInline': '0px',
  '--List-item-marginBlock': '0px',
  '--List-item-marginInline': '0px'
};
exports.scopedVariables = scopedVariables;
// internal component
function ListProvider({
  children,
  nested,
  row = false,
  wrap = false
}) {
  const baseProviders = /*#__PURE__*/(0, _jsxRuntime.jsx)(_RowListContext.default.Provider, {
    value: row,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_WrapListContext.default.Provider, {
      value: wrap,
      children: React.Children.map(children, (child, index) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, (0, _extends2.default)({}, index === 0 && {
        'data-first-child': ''
      })) : child)
    })
  });
  if (nested === undefined) {
    return baseProviders;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_NestedListContext.default.Provider, {
    value: nested,
    children: baseProviders
  });
}
var _default = ListProvider;
exports.default = _default;