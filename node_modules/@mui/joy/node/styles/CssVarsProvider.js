"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useColorScheme = exports.shouldSkipGeneratingVar = exports.getInitColorSchemeScript = exports.CssVarsProvider = void 0;
var _utils = require("@mui/utils");
var _system = require("@mui/system");
var _extendTheme = _interopRequireDefault(require("./extendTheme"));
var _variantUtils = require("./variantUtils");
const shouldSkipGeneratingVar = keys => {
  var _keys$;
  return !!keys[0].match(/^(typography|variants|breakpoints|colorInversion|colorInversionConfig)$/) || keys[0] === 'palette' && !!((_keys$ = keys[1]) != null && _keys$.match(/^(mode)$/)) || keys[0] === 'focus' && keys[1] !== 'thickness';
};
exports.shouldSkipGeneratingVar = shouldSkipGeneratingVar;
const {
  CssVarsProvider,
  useColorScheme,
  getInitColorSchemeScript
} = (0, _system.unstable_createCssVarsProvider)({
  theme: (0, _extendTheme.default)(),
  attribute: 'data-joy-color-scheme',
  modeStorageKey: 'joy-mode',
  colorSchemeStorageKey: 'joy-color-scheme',
  defaultColorScheme: {
    light: 'light',
    dark: 'dark'
  },
  resolveTheme: mergedTheme => {
    const colorInversionInput = mergedTheme.colorInversion;
    mergedTheme.colorInversion = (0, _utils.deepmerge)({
      soft: (0, _variantUtils.createSoftInversion)(mergedTheme),
      solid: (0, _variantUtils.createSolidInversion)(mergedTheme)
    }, typeof colorInversionInput === 'function' ? colorInversionInput(mergedTheme) : colorInversionInput, {
      clone: false
    });
    return mergedTheme;
  },
  shouldSkipGeneratingVar
});
exports.getInitColorSchemeScript = getInitColorSchemeScript;
exports.useColorScheme = useColorScheme;
exports.CssVarsProvider = CssVarsProvider;