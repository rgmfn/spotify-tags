"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemeWithVars = exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _utils = require("@mui/utils");
var _extendTheme2 = _interopRequireDefault(require("./extendTheme"));
var _variantUtils = require("./variantUtils");
const _excluded = ["colorSchemes", "focus", "fontFamily", "fontSize", "fontWeight", "letterSpacing", "lineHeight", "radius", "shadow", "palette", "colorInversion"],
  _excluded2 = ["mode", "colorScheme"];
const getThemeWithVars = themeInput => {
  const _extendTheme = (0, _extendTheme2.default)(themeInput),
    {
      colorSchemes,
      focus,
      fontFamily,
      fontSize,
      fontWeight,
      letterSpacing,
      lineHeight,
      radius,
      shadow,
      palette: paletteInput,
      colorInversion: colorInversionInput
    } = _extendTheme,
    restTheme = (0, _objectWithoutPropertiesLoose2.default)(_extendTheme, _excluded);
  const colorSchemePalette = (0, _utils.deepmerge)(colorSchemes[(paletteInput == null ? void 0 : paletteInput.colorScheme) || 'light'].palette, paletteInput);
  const _ref = colorSchemePalette,
    {
      mode = 'light',
      colorScheme = 'light'
    } = _ref,
    palette = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded2);
  const theme = (0, _extends2.default)({
    focus,
    fontFamily,
    fontSize,
    fontWeight,
    letterSpacing,
    lineHeight,
    radius,
    shadow
  }, restTheme, {
    colorSchemes: (0, _extends2.default)({}, colorSchemes, {
      [colorScheme]: palette
    }),
    palette: (0, _extends2.default)({}, palette, {
      mode,
      colorScheme
    }),
    vars: {
      focus,
      fontFamily,
      fontSize,
      fontWeight,
      letterSpacing,
      lineHeight,
      radius,
      shadow,
      palette
    },
    getColorSchemeSelector: () => '&'
  });
  theme.colorInversion = (0, _utils.deepmerge)({
    soft: (0, _variantUtils.createSoftInversion)(theme),
    solid: (0, _variantUtils.createSolidInversion)(theme)
  }, colorInversionInput);
  return theme;
};
exports.getThemeWithVars = getThemeWithVars;
const defaultTheme = getThemeWithVars();
var _default = defaultTheme;
exports.default = _default;