"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _styles = require("../styles");
var _ColorInversion = require("../styles/ColorInversion");
var _Sheet = require("../Sheet/Sheet");
var _modalDialogClasses = require("./modalDialogClasses");
var _ModalDialogSizeContext = _interopRequireDefault(require("./ModalDialogSizeContext"));
var _ModalDialogVariantColorContext = _interopRequireDefault(require("./ModalDialogVariantColorContext"));
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["className", "children", "color", "component", "variant", "size", "layout"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useUtilityClasses = ownerState => {
  const {
    variant,
    color,
    size,
    layout
  } = ownerState;
  const slots = {
    root: ['root', variant && `variant${(0, _utils.unstable_capitalize)(variant)}`, color && `color${(0, _utils.unstable_capitalize)(color)}`, size && `size${(0, _utils.unstable_capitalize)(size)}`, layout && `layout${(0, _utils.unstable_capitalize)(layout)}`]
  };
  return (0, _base.unstable_composeClasses)(slots, _modalDialogClasses.getModalDialogUtilityClass, {});
};
const ModalDialogRoot = (0, _styles.styled)(_Sheet.SheetRoot, {
  name: 'JoyModalDialog',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  theme,
  ownerState
}) => (0, _extends2.default)({
  // Divider integration
  '--Divider-inset': 'calc(-1 * var(--ModalDialog-padding))',
  '--ModalClose-radius': 'max((var(--ModalDialog-radius) - var(--variant-borderWidth, 0px)) - var(--ModalClose-inset), min(var(--ModalClose-inset) / 2, (var(--ModalDialog-radius) - var(--variant-borderWidth, 0px)) / 2))'
}, ownerState.size === 'sm' && {
  '--ModalDialog-padding': theme.spacing(1.25),
  '--ModalDialog-radius': theme.vars.radius.sm,
  '--ModalClose-inset': theme.spacing(0.75),
  fontSize: theme.vars.fontSize.sm
}, ownerState.size === 'md' && {
  '--ModalDialog-padding': theme.spacing(2),
  '--ModalDialog-radius': theme.vars.radius.md,
  '--ModalClose-inset': theme.spacing(1),
  fontSize: theme.vars.fontSize.md
}, ownerState.size === 'lg' && {
  '--ModalDialog-padding': theme.spacing(3),
  '--ModalDialog-radius': theme.vars.radius.md,
  '--ModalClose-inset': theme.spacing(1.5),
  fontSize: theme.vars.fontSize.md
}, {
  boxSizing: 'border-box',
  boxShadow: theme.shadow.md,
  borderRadius: 'var(--ModalDialog-radius)',
  fontFamily: theme.vars.fontFamily.body,
  lineHeight: theme.vars.lineHeight.md,
  padding: 'var(--ModalDialog-padding)',
  minWidth: 'min(calc(100vw - 2 * var(--ModalDialog-padding)), var(--ModalDialog-minWidth, 300px))',
  outline: 0,
  position: 'absolute'
}, ownerState.layout === 'fullscreen' && {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  border: 0,
  borderRadius: 0
}, ownerState.layout === 'center' && {
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)'
}));
const ModalDialog = /*#__PURE__*/React.forwardRef(function ModalDialog(inProps, ref) {
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoyModalDialog'
  });
  const {
      className,
      children,
      color: colorProp = 'neutral',
      component = 'div',
      variant = 'outlined',
      size = 'md',
      layout = 'center'
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const {
    getColor
  } = (0, _ColorInversion.useColorInversion)(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = (0, _extends2.default)({}, props, {
    color,
    component,
    layout,
    size,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  const contextValue = React.useMemo(() => ({
    variant,
    color: color === 'context' ? undefined : color
  }), [color, variant]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ModalDialogSizeContext.default.Provider, {
    value: size,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_ModalDialogVariantColorContext.default.Provider, {
      value: contextValue,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ModalDialogRoot, (0, _extends2.default)({
        as: component,
        ownerState: ownerState,
        className: (0, _clsx.default)(classes.root, className),
        ref: ref,
        role: "dialog",
        "aria-modal": "true"
      }, other, {
        children: React.Children.map(children, child => {
          if (! /*#__PURE__*/React.isValidElement(child)) {
            return child;
          }
          if ((0, _utils.unstable_isMuiElement)(child, ['Divider'])) {
            const extraProps = {};
            extraProps.inset = 'inset' in child.props ? child.props.inset : 'context';
            return /*#__PURE__*/React.cloneElement(child, extraProps);
          }
          return child;
        })
      }))
    })
  });
});
process.env.NODE_ENV !== "production" ? ModalDialog.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The content of the component.
   */
  children: _propTypes.default.node,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * The layout of the dialog
   * @default 'center'
   */
  layout: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['center', 'fullscreen']), _propTypes.default.string]),
  /**
   * The size of the component.
   * @default 'md'
   */
  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['sm', 'md', 'lg']), _propTypes.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The variant to use.
   * @default 'plain'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['outlined', 'plain', 'soft', 'solid']), _propTypes.default.string])
} : void 0;
var _default = ModalDialog;
exports.default = _default;