"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StyledAutocompleteOption = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _clsx = _interopRequireDefault(require("clsx"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _utils = require("@mui/utils");
var _composeClasses = _interopRequireDefault(require("@mui/base/composeClasses"));
var _ListItemButton = require("../ListItemButton/ListItemButton");
var _styles = require("../styles");
var _autocompleteOptionClasses = _interopRequireWildcard(require("./autocompleteOptionClasses"));
var _ColorInversion = require("../styles/ColorInversion");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["children", "component", "color", "variant", "className"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useUtilityClasses = ownerState => {
  const {
    color,
    variant
  } = ownerState;
  const slots = {
    root: ['root', color && `color${(0, _utils.unstable_capitalize)(color)}`, variant && `variant${(0, _utils.unstable_capitalize)(variant)}`]
  };
  return (0, _composeClasses.default)(slots, _autocompleteOptionClasses.getAutocompleteOptionUtilityClass, {});
};
const StyledAutocompleteOption = (0, _styles.styled)(_ListItemButton.StyledListItemButton)(({
  theme,
  ownerState
}) => {
  var _theme$variants, _theme$variants$soft, _theme$variants$soft2, _theme$variants$soft3, _theme$variants$soft4, _theme$variants2, _theme$variants3;
  return {
    '&:not(:hover)': {
      transition: 'none' // prevent flicker when using keyboard arrows to move between options
    },

    '&[aria-disabled="true"]': (_theme$variants = theme.variants[`${ownerState.variant}Disabled`]) == null ? void 0 : _theme$variants[ownerState.color],
    '&[aria-selected="true"]': {
      color: (_theme$variants$soft = theme.variants.soft) == null ? void 0 : (_theme$variants$soft2 = _theme$variants$soft[ownerState.color === 'context' ? 'context' : 'primary']) == null ? void 0 : _theme$variants$soft2.color,
      backgroundColor: (_theme$variants$soft3 = theme.variants.soft) == null ? void 0 : (_theme$variants$soft4 = _theme$variants$soft3[ownerState.color === 'context' ? 'context' : 'primary']) == null ? void 0 : _theme$variants$soft4.backgroundColor,
      fontWeight: theme.vars.fontWeight.md
    },
    [`&.${_autocompleteOptionClasses.default.focused}:not([aria-selected="true"]):not(:hover)`]: {
      // create the focused style similar to the hover state
      backgroundColor: (_theme$variants2 = theme.variants[`${ownerState.variant}Hover`]) == null ? void 0 : (_theme$variants3 = _theme$variants2[ownerState.color]) == null ? void 0 : _theme$variants3.backgroundColor
    }
  };
});
exports.StyledAutocompleteOption = StyledAutocompleteOption;
const AutocompleteOptionRoot = (0, _styles.styled)(StyledAutocompleteOption, {
  name: 'JoyAutocompleteOption',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})({});
const AutocompleteOption = /*#__PURE__*/React.forwardRef(function AutocompleteOption(inProps, ref) {
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoyAutocompleteOption'
  });
  const {
      children,
      component = 'li',
      color: colorProp = 'neutral',
      variant = 'plain',
      className
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const {
    getColor
  } = (0, _ColorInversion.useColorInversion)(variant);
  const color = getColor(inProps.color, colorProp);
  const ownerState = (0, _extends2.default)({}, props, {
    component,
    color,
    variant
  });
  const classes = useUtilityClasses(ownerState);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(AutocompleteOptionRoot, (0, _extends2.default)({
    ref: ref,
    as: component,
    ownerState: ownerState,
    className: (0, _clsx.default)(classes.root, className),
    role: "option"
  }, other, {
    children: children
  }));
});
process.env.NODE_ENV !== "production" ? AutocompleteOption.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * @ignore
   */
  className: _propTypes.default.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The variant to use.
   * @default 'plain'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['contained', 'light', 'outlined', 'text']), _propTypes.default.string])
} : void 0;
var _default = AutocompleteOption;
exports.default = _default;