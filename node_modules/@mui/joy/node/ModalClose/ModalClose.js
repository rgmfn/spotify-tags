"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ModalCloseRoot = void 0;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _base = require("@mui/base");
var _utils = require("@mui/utils");
var _utils2 = require("@mui/base/utils");
var _ButtonUnstyled = require("@mui/base/ButtonUnstyled");
var _styles = require("../styles");
var _ColorInversion = require("../styles/ColorInversion");
var _IconButton = require("../IconButton/IconButton");
var _modalCloseClasses = require("./modalCloseClasses");
var _Close = _interopRequireDefault(require("../internal/svg-icons/Close"));
var _CloseModalContext = _interopRequireDefault(require("../Modal/CloseModalContext"));
var _ModalDialogSizeContext = _interopRequireDefault(require("../ModalDialog/ModalDialogSizeContext"));
var _ModalDialogVariantColorContext = _interopRequireDefault(require("../ModalDialog/ModalDialogVariantColorContext"));
var _jsxRuntime = require("react/jsx-runtime");
var _CloseIcon;
const _excluded = ["component", "color", "variant", "size", "onClick"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useUtilityClasses = ownerState => {
  const {
    variant,
    color,
    disabled,
    focusVisible,
    size
  } = ownerState;
  const slots = {
    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', variant && `variant${(0, _utils.unstable_capitalize)(variant)}`, color && `color${(0, _utils.unstable_capitalize)(color)}`, size && `size${(0, _utils.unstable_capitalize)(size)}`]
  };
  return (0, _base.unstable_composeClasses)(slots, _modalCloseClasses.getModalCloseUtilityClass, {});
};
const ModalCloseRoot = (0, _styles.styled)(_IconButton.StyledIconButton, {
  name: 'JoyModalClose',
  slot: 'Root',
  overridesResolver: (props, styles) => styles.root
})(({
  ownerState,
  theme
}) => {
  var _theme$variants, _theme$variants2;
  return (0, _extends2.default)({}, ownerState.size === 'sm' && {
    '--IconButton-size': '28px'
  }, ownerState.size === 'md' && {
    '--IconButton-size': '36px'
  }, ownerState.size === 'lg' && {
    '--IconButton-size': '40px'
  }, {
    position: 'absolute',
    top: `var(--ModalClose-inset, ${theme.spacing(1)})`,
    right: `var(--ModalClose-inset, ${theme.spacing(1)})`,
    borderRadius: `var(--ModalClose-radius, ${theme.vars.radius.sm})`
  }, !((_theme$variants = theme.variants[ownerState.variant]) != null && (_theme$variants2 = _theme$variants[ownerState.color]) != null && _theme$variants2.backgroundColor) && {
    color: theme.vars.palette.text.secondary
  });
});
exports.ModalCloseRoot = ModalCloseRoot;
const modalDialogVariantMapping = {
  plain: 'plain',
  outlined: 'plain',
  soft: 'soft',
  solid: 'solid'
};
const ModalClose = /*#__PURE__*/React.forwardRef(function ModalClose(inProps, ref) {
  var _ref, _inProps$variant, _modalDialogVariantCo, _ref2, _inProps$size;
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'JoyModalClose'
  });
  const {
      component = 'button',
      color: colorProp = 'neutral',
      variant: variantProp = 'plain',
      size: sizeProp = 'md',
      onClick
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const closeModalContext = React.useContext(_CloseModalContext.default);
  const modalDialogVariantColor = React.useContext(_ModalDialogVariantColorContext.default);
  const variant = (_ref = (_inProps$variant = inProps.variant) != null ? _inProps$variant : modalDialogVariantMapping[modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.variant]) != null ? _ref : variantProp;
  const {
    getColor
  } = (0, _ColorInversion.useColorInversion)(variant);
  const color = getColor(inProps.color, (_modalDialogVariantCo = modalDialogVariantColor == null ? void 0 : modalDialogVariantColor.color) != null ? _modalDialogVariantCo : colorProp);
  const modalDialogSize = React.useContext(_ModalDialogSizeContext.default);
  const size = (_ref2 = (_inProps$size = inProps.size) != null ? _inProps$size : modalDialogSize) != null ? _ref2 : sizeProp;
  const {
    focusVisible,
    getRootProps
  } = (0, _ButtonUnstyled.useButton)((0, _extends2.default)({}, props, {
    ref
  }));
  const ownerState = (0, _extends2.default)({}, props, {
    color,
    component,
    variant,
    size,
    focusVisible
  });
  const classes = useUtilityClasses(ownerState);
  const rootProps = (0, _utils2.useSlotProps)({
    elementType: ModalCloseRoot,
    getSlotProps: getRootProps,
    externalSlotProps: (0, _extends2.default)({
      onClick: event => {
        closeModalContext == null ? void 0 : closeModalContext(event, 'closeClick');
        onClick == null ? void 0 : onClick(event);
      }
    }, other),
    additionalProps: {
      as: component
    },
    className: classes.root,
    ownerState
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ModalCloseRoot, (0, _extends2.default)({}, rootProps, {
    children: _CloseIcon || (_CloseIcon = /*#__PURE__*/(0, _jsxRuntime.jsx)(_Close.default, {}))
  }));
});
process.env.NODE_ENV !== "production" ? ModalClose.propTypes /* remove-proptypes */ = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore
   */
  children: _propTypes.default.node,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'neutral'
   */
  color: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['danger', 'info', 'neutral', 'primary', 'success', 'warning']), _propTypes.default.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: _propTypes.default.elementType,
  /**
   * @ignore
   */
  onClick: _propTypes.default.func,
  /**
   * The size of the component.
   * @default 'md'
   */
  size: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['sm', 'md', 'lg']), _propTypes.default.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  /**
   * The variant to use.
   * @default 'plain'
   */
  variant: _propTypes.default /* @typescript-to-proptypes-ignore */.oneOfType([_propTypes.default.oneOf(['outlined', 'plain', 'soft', 'solid']), _propTypes.default.string])
} : void 0;
var _default = ModalClose;
exports.default = _default;